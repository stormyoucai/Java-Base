1、流：
程序中所有的数据都是以流的方式进行传输或保存的。程序需要数据的时候，使用输入流读取数据；程序需要将一些数据保存起来的时候，
要使用输出流完成。
注意：此处的输入、输出流是针对程序而言的，即以程序为参照物。向程序中输入数据——输入流，从程序中输出数据——输出流。

2、程序中的输入、输出都是以流的形式保存的，流中保存的实际上全部都是字节文件。

3、字节流与字符流：（java.io包中操作文件内容）(以下四个操作类都是抽象类)
字节流：主要操作byte类型数据，以byte数组为准。Byte是字节，所有的数据基本上都可以直接使用byte数组表示出来
    字节输入流：InputStream，从文件中把内容读取进来
        常用方法：avaliable(),close(),read(),read(byte[] b)
        子类：FileInputStream

    字节输出流：OutputStream，是整个io包中 字节 输出流的最大父类，此类是一个抽象类
        常用方法：close(),flush(),write(byte[] b),write(byte[],int off,int len),write(int i)
        子类：FileOutputStream：在操作的时候，如果文件本身不存在，则会自动创建
        在IO操作中默认的情况是将其原先的内容进行覆盖，要想执行追加功能，则必须设置追加操作
        在文件操作中想要换行的话，使用“\r\n”完成

Closeable接口：表示可以关闭的操作，因为程序运行到最后肯定需要关闭
Flushable接口：表示刷新，清空内存中的数据

字符流：字符流操作比字节流有一点好处，可以直接输出字符串了，不需要像字节流那样进行转换
    字符输入流：Reader,是一个抽象类，使用字符的方法从文件中取出数据
        子类：FileReader
        常用方法：close(),read(),read(char[] cbuf)

    字符输出流：Writer，是一个抽象类
        常用方法：close(),write(String str),write(char[] cbuf),flush()
        子类：FileWriter

4、操作流程：
打开文件——>指定输出的位置——>进行读/写操作——>关闭输入/输出流

5、IO操作输入资源操作，对于资源操作，操作的最后必须关闭，否则就有可能出现未知的错误。

6、字节流与字符流的区别：
    字节流在操作的时候本身不会使用到缓冲区（内存的），是与文件本身直接操作的。
        字节流最后没有关闭也是可以输入的
    字符流在操作的时候是使用到缓冲区的（字符流就相当于字节流数组）。
        字符流不关闭是没有内容输出的，因为所有的内容都在缓冲区之中，而执行关闭操作，会强制性刷新缓冲区，所以可以将内容输出
        也可以通过flush()方法，手动强制性清空缓冲区中的内容

7、开发中使用字节流还是字符流？
所有的硬盘上保存的文件或是进行传输的时候都是以字节的方式进行的。包括图片也是按字节完成，
而字符只有在内存中才会形成，所以使用字节操作是最多的。

8、Intellij idea中给主函数args赋值：
Edit Configurations ——> Program arguments —— 多个参数间空格分割

总结：
1、掌握OutputStream和InputStream常用方法，以及其各个子类的特性

2、掌握Writer和Reader常用方法，以及其各个子类的特性

3、对于资源操作，任何时候都不要忘记关闭

4、掌握边读边写的方式，在日后的开发中非常有用

5、掌握流的概念

6、本章是以文件为例子